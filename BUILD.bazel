load(
    "//ign_bazel:build_defs.bzl",
    "IGNITION_ROOT",
    "IGNITION_VISIBILITY",
    "cmake_configure_file",
    "generate_include_header",
    "generate_yaml",
    "ign_config_header",
    "ign_export_header",
)

load(
    "//ign_bazel:qt.bzl",
    "qt_cc_library",
    "qt_resource",
)

load(
    "//ign_msgs:ign_msg_gen.bzl",
    "get_proto_headers",
    "ign_msg_gen",
)

package(
    default_visibility = IGNITION_VISIBILITY,
    features = [
        "-parse_headers",
        "-layering_check",
    ],
)

licenses(["notice"])

exports_files(["LICENSE"])

PROJECT_NAME = "ignition-gazebo"

PROJECT_MAJOR = 5

PROJECT_MINOR = 0

PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
ign_config_header(
    name = "config",
    src = "include/ignition/gazebo/config.hh.in",
    out = "include/ignition/gazebo/config.hh",
    cmakelists = ["CMakeLists.txt"],
    extra_defines = [
        "CMAKE_INSTALL_PREFIX=./ign_gazebo/",
        "IGN_DATA_INSTALL_DIR=./ign_gazebo/",
        "IGN_LIB_INSTALL_DIR=./ign_gazebo/",
    ],
    project_name = PROJECT_NAME,
    project_version = (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),
)

ign_export_header(
    name = "include/ignition/gazebo/Export.hh",
    export_base = "IGNITION_GAZEBO",
    lib_name = "ignition-gazebo",
    visibility = ["//visibility:private"],
)

ign_export_header(
    name = "include/ignition/gazebo/rendering/Export.hh",
    export_base = "IGNITION_GAZEBO_RENDERING",
    lib_name = "ignition-gazebo",
    visibility = ["//visibility:private"],
)

ign_export_header(
    name = "include/ignition/gazebo/gui/Export.hh",
    export_base = "IGNITION_GAZEBO_GUI",
    lib_name = "ignition-gazebo",
    visibility = ["//visibility:private"],
)

public_component_headers_no_gen = glob(
    ["include/ignition/gazebo/components/*.hh"],
)

public_headers_no_gen = glob([
    "include/ignition/gazebo/*.hh",
    "include/ignition/gazebo/detail/*.hh",
    "include/ignition/gazebo/gui/*.hh",
    "include/ignition/gazebo/rendering/*.hh",
])

private_headers = [
    "src/Barrier.hh",
    "src/ign.hh",
    "src/LevelManager.hh",
    "src/SdfGenerator.hh",
    "src/ServerPrivate.hh",
    "src/SimulationRunner.hh",
    "src/network/NetworkConfig.hh",
    "src/network/NetworkManager.hh",
    "src/network/NetworkManagerPrimary.hh",
    "src/network/NetworkManagerSecondary.hh",
    "src/network/NetworkManagerPrivate.hh",
    "src/network/NetworkRole.hh",
    "src/network/PeerInfo.hh",
    "src/network/PeerTracker.hh",
]

sources = [
    "src/Barrier.cc",
    "src/Conversions.cc",
    "src/EntityComponentManager.cc",
    "src/LevelManager.cc",
    "src/Link.cc",
    "src/Model.cc",
    "src/SdfEntityCreator.cc",
    "src/SdfGenerator.cc",
    "src/Server.cc",
    "src/ServerConfig.cc",
    "src/ServerPrivate.cc",
    "src/SimulationRunner.cc",
    "src/SystemLoader.cc",
    "src/Util.cc",
    "src/View.cc",
    "src/World.cc",
    "src/rendering/MarkerManager.cc",
    "src/rendering/RenderUtil.cc",
    "src/rendering/SceneManager.cc",
    "src/network/NetworkConfig.cc",
    "src/network/NetworkManager.cc",
    "src/network/NetworkManagerPrimary.cc",
    "src/network/NetworkManagerSecondary.cc",
    "src/network/PeerInfo.cc",
    "src/network/PeerTracker.cc",
]

test_sources = [
    "src/Barrier_TEST.cc",
    "src/ComponentFactory_TEST.cc",
    "src/Component_TEST.cc",
    "src/Conversions_TEST.cc",
    "src/EntityComponentManager_TEST.cc",
    "src/EventManager_TEST.cc",
    "src/Link_TEST.cc",
    "src/Model_TEST.cc",
    "src/SdfEntityCreator_TEST.cc",
    # "src/SdfGenerator_TEST.cc",
    # "src/Server_TEST.cc",
    "src/SimulationRunner_TEST.cc",
    "src/SystemLoader_TEST.cc",
    "src/System_TEST.cc",
    "src/Util_TEST.cc",
]

protos = glob(
    ["src/msgs/*.proto"],
    exclude = ["src/msgs/performer_affinity.proto"],
)

proto_library(
    name = "performer_affinity_proto",
    srcs = ["src/msgs/performer_affinity.proto"],
    strip_import_prefix = "src/msgs",
    deps = [
        "//ign_msgs:ignmsgs_proto_public",
    ],
)

proto_library(
    name = "igngazebo_proto",
    srcs = protos,
    strip_import_prefix = "src",
    deps = [
        ":performer_affinity_proto",
        "//ign_msgs:ignmsgs_proto_public",
    ],
)

cc_proto_library(
    name = "igngazebo_proto_cc",
    deps = [
        ":igngazebo_proto",
    ],
)

generate_include_header(
    name = "gazebohh_genrule",
    out = "include/ignition/gazebo.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/gazebo/config.hh",
        "include/ignition/gazebo/Export.hh",
    ],
)

generate_include_header(
    name = "gazebo_componentshh_genrule",
    out = "include/ignition/gazebo/components/components.hh",
    hdrs = public_component_headers_no_gen,
)

public_headers = public_headers_no_gen + public_component_headers_no_gen + [
    "include/ignition/gazebo/config.hh",
    "include/ignition/gazebo/Export.hh",
    "include/ignition/gazebo/gui/Export.hh",
    "include/ignition/gazebo/rendering/Export.hh",
    "include/ignition/gazebo.hh",
    "include/ignition/gazebo/components/components.hh",
]

cc_library(
    name = "ign_gazebo_headers",
    hdrs = private_headers + public_headers,
    includes = ["include"],
)

qt_resource(
    name = "gazebo",
    qrc_file = "src/gui/resources/gazebo.qrc",
    files = glob([
        "src/gui/resources/GazeboDrawer.qml",
        "src/gui/resources/images/*.*"
    ])
)

qt_cc_library(
    name = "ign_gazebo_gui",
    srcs = [
        "src/gui/AboutDialogHandler.cc",
        "src/gui/Gui.cc",
        "src/gui/GuiFileHandler.cc",
        "src/gui/PathManager.cc",
        "src/gui/TmpIface.cc",
        "src/gui/GuiRunner.cc",
        "src/gui/GuiSystem.cc",
    ],
    hdrs = [
        "src/gui/AboutDialogHandler.hh",
        "src/gui/GuiFileHandler.hh",
        "src/gui/PathManager.hh",
        "include/ignition/gazebo/gui/TmpIface.hh",
        "include/ignition/gazebo/gui/GuiRunner.hh",
        "include/ignition/gazebo/gui/GuiSystem.hh",
    ],
    alwayslink = 1,
    includes = [".", "include"],
    deps = [
        IGNITION_ROOT + "ign_gazebo:ign_gazebo_headers",
        IGNITION_ROOT + "sdformat",
        IGNITION_ROOT + "ign_fuel_tools",
        IGNITION_ROOT + "ign_common",
        IGNITION_ROOT + "ign_common/profiler",
        IGNITION_ROOT + "ign_gui",
    ],
)

cc_library(
    name = "ign_gazebo",
    srcs = sources + private_headers,
    hdrs = public_headers,
    includes = ["include"],
    alwayslink = 1,
    deps = [
        ":igngazebo_proto_cc",
        IGNITION_ROOT + "ign_common",
        IGNITION_ROOT + "ign_common/events",
        IGNITION_ROOT + "ign_common/graphics",
        IGNITION_ROOT + "ign_common/profiler",
        IGNITION_ROOT + "ign_fuel_tools",
        IGNITION_ROOT + "ign_gui",
        IGNITION_ROOT + "ign_math",
        IGNITION_ROOT + "ign_msgs",
        IGNITION_ROOT + "ign_plugin",
        IGNITION_ROOT + "ign_rendering",
        IGNITION_ROOT + "ign_transport",
        IGNITION_ROOT + "sdformat",
    ],
)

cc_library(
    name = "ign_gazebo_resources",
    deps = [
        ":gazebo",
        IGNITION_ROOT + "ign_gui:ign_gui_resources" ,
        IGNITION_ROOT + "ign_gazebo/src/gui/plugins:ign_gui_plugin_resources"
    ],
)

cc_binary(
    name = "libignition-gazebo.so",
    srcs = ["src/ign.cc", "src/ign.hh"],
    linkstatic = False,
    linkshared = True,
    data = [
        IGNITION_ROOT + "ign_gazebo/src/systems:systems"
    ],
    deps = [
        ":ign_gazebo",
        ":ign_gazebo_headers",
        ":ign_gazebo_gui",
        ":ign_gazebo_resources",
    ],
)

cc_binary(
    name = "ign-gazebo-server",
    srcs = ["src/ign-gazebo-server.cc"],
    deps = [
        ":ign_gazebo",
        ":ign_gazebo_headers",
        IGNITION_ROOT + "ign_gazebo/src/systems"
    ],
)

cc_binary(
    name = "ign-gazebo-gui",
    srcs = ["src/ign-gazebo-gui.cc"],
    linkstatic = False,
    deps = [
        ":ign_gazebo",
        ":ign_gazebo_headers",
        ":ign_gazebo_gui",
        ":ign_gazebo_resources",
    ],
)

cmake_configure_file(
    name = "gazebo.rb",
    src = "src/cmd/cmdgazebo.rb.in",
    out = "cmdazebo.rb",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "library_location=libignition-gazebo.so",
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "IGN_LIBRARY_NAME=%s" % PROJECT_NAME,
    ],
)

CMDS = "    - gazebo   : Launch graphical interfaces."

generate_yaml(
    name = "gazebo.yaml",
    commands = CMDS,
    library_name = PROJECT_NAME,
    library_version = "%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),
    ruby_target = "gazebo.rb",
)

